// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/masnann/plant_care/features/assistant/domain"
	mock "github.com/stretchr/testify/mock"
)

// ServiceAssistantInterface is an autogenerated mock type for the ServiceAssistantInterface type
type ServiceAssistantInterface struct {
	mock.Mock
}

// Assistant provides a mock function with given fields: ctx, req
func (_m *ServiceAssistantInterface) Assistant(ctx context.Context, req domain.MessageRequest) (string, error) {
	ret := _m.Called(ctx, req)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.MessageRequest) (string, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.MessageRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.MessageRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServiceAssistantInterface creates a new instance of ServiceAssistantInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceAssistantInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceAssistantInterface {
	mock := &ServiceAssistantInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
