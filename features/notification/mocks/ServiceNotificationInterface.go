// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	domain "github.com/masnann/plant_care/features/notification/domain"

	mock "github.com/stretchr/testify/mock"
)

// ServiceNotificationInterface is an autogenerated mock type for the ServiceNotificationInterface type
type ServiceNotificationInterface struct {
	mock.Mock
}

// CountNotifications provides a mock function with given fields: userID
func (_m *ServiceNotificationInterface) CountNotifications(userID uint64) (uint64, error) {
	ret := _m.Called(userID)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (uint64, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint64) uint64); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaginationNotifications provides a mock function with given fields: userID, page, pageSize
func (_m *ServiceNotificationInterface) GetPaginationNotifications(userID uint64, page int, pageSize int) ([]*domain.NotificationModel, error) {
	ret := _m.Called(userID, page, pageSize)

	var r0 []*domain.NotificationModel
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, int, int) ([]*domain.NotificationModel, error)); ok {
		return rf(userID, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(uint64, int, int) []*domain.NotificationModel); ok {
		r0 = rf(userID, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.NotificationModel)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64, int, int) error); ok {
		r1 = rf(userID, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertNotifications provides a mock function with given fields: c, plantName
func (_m *ServiceNotificationInterface) InsertNotifications(c echo.Context, plantName string) (*domain.NotificationModel, error) {
	ret := _m.Called(c, plantName)

	var r0 *domain.NotificationModel
	var r1 error
	if rf, ok := ret.Get(0).(func(echo.Context, string) (*domain.NotificationModel, error)); ok {
		return rf(c, plantName)
	}
	if rf, ok := ret.Get(0).(func(echo.Context, string) *domain.NotificationModel); ok {
		r0 = rf(c, plantName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.NotificationModel)
		}
	}

	if rf, ok := ret.Get(1).(func(echo.Context, string) error); ok {
		r1 = rf(c, plantName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServiceNotificationInterface creates a new instance of ServiceNotificationInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceNotificationInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceNotificationInterface {
	mock := &ServiceNotificationInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
