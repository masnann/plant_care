// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	domain "github.com/masnann/plant_care/features/notification/domain"
	mock "github.com/stretchr/testify/mock"
)

// RepoNotificationInterface is an autogenerated mock type for the RepoNotificationInterface type
type RepoNotificationInterface struct {
	mock.Mock
}

// CountNotifications provides a mock function with given fields: userID
func (_m *RepoNotificationInterface) CountNotifications(userID uint64) (uint64, error) {
	ret := _m.Called(userID)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) (uint64, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint64) uint64); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPaginationNotifications provides a mock function with given fields: userID, offset, pageSize, notify
func (_m *RepoNotificationInterface) GetPaginationNotifications(userID uint64, offset int, pageSize int, notify *[]*domain.NotificationModel) error {
	ret := _m.Called(userID, offset, pageSize, notify)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64, int, int, *[]*domain.NotificationModel) error); ok {
		r0 = rf(userID, offset, pageSize, notify)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertNotifications provides a mock function with given fields: notifyModel
func (_m *RepoNotificationInterface) InsertNotifications(notifyModel *domain.NotificationModel) (*domain.NotificationModel, error) {
	ret := _m.Called(notifyModel)

	var r0 *domain.NotificationModel
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.NotificationModel) (*domain.NotificationModel, error)); ok {
		return rf(notifyModel)
	}
	if rf, ok := ret.Get(0).(func(*domain.NotificationModel) *domain.NotificationModel); ok {
		r0 = rf(notifyModel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.NotificationModel)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.NotificationModel) error); ok {
		r1 = rf(notifyModel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepoNotificationInterface creates a new instance of RepoNotificationInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepoNotificationInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepoNotificationInterface {
	mock := &RepoNotificationInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
